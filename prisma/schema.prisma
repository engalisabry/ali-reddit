// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")

  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  createdSubreddits  Subreddit[] @relation("CreatedBy")

  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]

  post    Post[]
  comment Comment[]
  commentVote CommentVote[]
  vote    Vote[]
  subscriptions Subscription[]
}

model Subreddit {
  id        String @id @default(cuid())
  name      String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String
  creator     User? @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Subscription {
  user          User @relation(fields: [userId], references: [id])  
  userId        String
  subreddit     Subreddit @relation(fields: [subredditId], references: [id])
  subredditId   String

  @@id([userId, subredditId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subredditId String
  subreddit Subreddit @relation(fields: [subredditId], references: [id])
  authorId String
  author User @relation(fields: [authorId], references: [id])

  comments Comment[]
  votes Vote[]

  @@index([subredditId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([authorId])
  @@index([postId])
  @@index([replyToId])
}

model CommentVote {
  commentId         String
  comment           Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  voteType          VoteType

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
}


model Vote {
  user      User @relation(fields: [userId], references: [id])
  userId    String
  post      Post @relation(fields: [postId], references: [id])
  postId    String
  type      VoteType

  @@id([userId, postId])
}

